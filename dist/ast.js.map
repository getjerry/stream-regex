{"version":3,"file":"ast.js","names":["_map","_interopRequireDefault","require","_regex","obj","__esModule","default","semantics","g","createSemantics","addOperation","_iter","children","type","ctorName","value","map","child","toAST","_terminal","sourceString","_nonterminal","getAST","regex","match","source","err","msg","Error","message","SyntaxError","exports","getValue","node","String","toString","join"],"sources":["../src/ast.ts"],"sourcesContent":["import map from 'lodash/map';\n\nimport g from './grammar/regex.ohm-bundle';\n\n// Convert regex grammar to syntax tree.\nconst semantics\n  = g.createSemantics()\n    .addOperation('toAST', {\n      _iter(...children) {\n        return {\n          type: this.ctorName,\n          value: map(children, (child) => child.toAST()),\n        }\n      },\n      _terminal() {\n        return {\n          type: this.ctorName,\n          value: [this.sourceString],\n        }\n      },\n      _nonterminal(...children) {\n        return {\n          type: this.ctorName,\n          value: map(children, (child) => child.toAST()),\n        }\n      },\n    });\n\n// AST interface.\nexport interface AST {\n  type: string;\n  value: AST[];\n}\n\n/**\n * Convert regex to AST.\n *\n * @param regex\n */\nexport const getAST = (regex: RegExp): AST => {\n  try {\n    return semantics(g.match(regex.source)).toAST();\n  } catch (err: unknown) {\n    const msg = err instanceof Error ? err.message : 'Unable to parse regex (probably not supported by this library).';\n    throw new SyntaxError(`Unable to parse regex: ${msg}. This is probably a limitation of this library and not an error in the input expression.`);\n  }\n};\n\n/**\n * Gets the terminal value of a partial AST.\n *\n * @param node\n */\nexport const getValue = (node: AST): string => {\n  if (node.type === '_terminal') {\n    return (new String(node.value[0])).toString();\n  }\n\n  return map(node.value, (child) => getValue(child)).join('');\n}"],"mappings":";;;;;;AAAA,IAAAA,IAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AAA2C,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAE3C;AACA,MAAMG,SAAS,GACXC,cAAC,CAACC,eAAe,CAAC,CAAC,CAClBC,YAAY,CAAC,OAAO,EAAE;EACrBC,KAAKA,CAAC,GAAGC,QAAQ,EAAE;IACjB,OAAO;MACLC,IAAI,EAAE,IAAI,CAACC,QAAQ;MACnBC,KAAK,EAAE,IAAAC,YAAG,EAACJ,QAAQ,EAAGK,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC,CAAC;IAC/C,CAAC;EACH,CAAC;EACDC,SAASA,CAAA,EAAG;IACV,OAAO;MACLN,IAAI,EAAE,IAAI,CAACC,QAAQ;MACnBC,KAAK,EAAE,CAAC,IAAI,CAACK,YAAY;IAC3B,CAAC;EACH,CAAC;EACDC,YAAYA,CAAC,GAAGT,QAAQ,EAAE;IACxB,OAAO;MACLC,IAAI,EAAE,IAAI,CAACC,QAAQ;MACnBC,KAAK,EAAE,IAAAC,YAAG,EAACJ,QAAQ,EAAGK,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC,CAAC;IAC/C,CAAC;EACH;AACF,CAAC,CAAC;;AAEN;;AAMA;AACA;AACA;AACA;AACA;AACO,MAAMI,MAAM,GAAIC,KAAa,IAAU;EAC5C,IAAI;IACF,OAAOhB,SAAS,CAACC,cAAC,CAACgB,KAAK,CAACD,KAAK,CAACE,MAAM,CAAC,CAAC,CAACP,KAAK,CAAC,CAAC;EACjD,CAAC,CAAC,OAAOQ,GAAY,EAAE;IACrB,MAAMC,GAAG,GAAGD,GAAG,YAAYE,KAAK,GAAGF,GAAG,CAACG,OAAO,GAAG,iEAAiE;IAClH,MAAM,IAAIC,WAAW,CAAE,0BAAyBH,GAAI,2FAA0F,CAAC;EACjJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AAJAI,OAAA,CAAAT,MAAA,GAAAA,MAAA;AAKO,MAAMU,QAAQ,GAAIC,IAAS,IAAa;EAC7C,IAAIA,IAAI,CAACpB,IAAI,KAAK,WAAW,EAAE;IAC7B,OAAQ,IAAIqB,MAAM,CAACD,IAAI,CAAClB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAEoB,QAAQ,CAAC,CAAC;EAC/C;EAEA,OAAO,IAAAnB,YAAG,EAACiB,IAAI,CAAClB,KAAK,EAAGE,KAAK,IAAKe,QAAQ,CAACf,KAAK,CAAC,CAAC,CAACmB,IAAI,CAAC,EAAE,CAAC;AAC7D,CAAC;AAAAL,OAAA,CAAAC,QAAA,GAAAA,QAAA"}