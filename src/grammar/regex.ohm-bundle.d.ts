// AUTOGENERATED FILE
// This file was generated from regex.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface RegExpActionDict<T> extends BaseActionDict<T> {
  expression?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: IterationNode, arg3: IterationNode) => T;
  subExpression?: (this: NonterminalNode, arg0: IterationNode) => T;
  expressionItem?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  group?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  groupExpression?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: IterationNode) => T;
  match?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  matchItem?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  anyChar?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeCharacter?: (this: NonterminalNode, arg0: TerminalNode) => T;
  specialCharacter?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  characterClass?: (this: NonterminalNode, arg0: TerminalNode) => T;
  baseCharacter?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  character?: (this: NonterminalNode, arg0: IterationNode | NonterminalNode, arg1: NonterminalNode) => T;
  matchCharacterClass?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  characterGroup?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  characterGroupInner?: (this: NonterminalNode, arg0: IterationNode) => T;
  characterGroupItem?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  characterRange?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  characterRangeItem?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  anchor?: (this: NonterminalNode, arg0: TerminalNode) => T;
  quantifier?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  quantifierType?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  matchCount1?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  matchCount2?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
}

export interface RegExpSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: RegExpActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: RegExpActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: RegExpActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: RegExpActionDict<T>): this;
}

export interface RegExpGrammar extends Grammar {
  createSemantics(): RegExpSemantics;
  extendSemantics(superSemantics: RegExpSemantics): RegExpSemantics;
}

declare const grammar: RegExpGrammar;
export default grammar;

